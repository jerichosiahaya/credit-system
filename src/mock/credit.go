// Code generated by MockGen. DO NOT EDIT.
// Source: D:\personal-dev\kredit-plus\src\domain\credit.go
//
// Generated by this command:
//
//	mockgen -source=D:\personal-dev\kredit-plus\src\domain\credit.go -destination=D:\personal-dev\kredit-plus\src\mock\credit.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "kredit-plus/src/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// InsertCustomer mocks base method.
func (m *MockDatabase) InsertCustomer(ctx context.Context, customer domain.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCustomer indicates an expected call of InsertCustomer.
func (mr *MockDatabaseMockRecorder) InsertCustomer(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCustomer", reflect.TypeOf((*MockDatabase)(nil).InsertCustomer), ctx, customer)
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateContract mocks base method.
func (m *MockUsecase) CreateContract(ctx context.Context, contract domain.Contract) (domain.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContract", ctx, contract)
	ret0, _ := ret[0].(domain.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockUsecaseMockRecorder) CreateContract(ctx, contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockUsecase)(nil).CreateContract), ctx, contract)
}

// CreateCreditLimit mocks base method.
func (m *MockUsecase) CreateCreditLimit(ctx context.Context, credit domain.Credit) (domain.Credit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditLimit", ctx, credit)
	ret0, _ := ret[0].(domain.Credit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCreditLimit indicates an expected call of CreateCreditLimit.
func (mr *MockUsecaseMockRecorder) CreateCreditLimit(ctx, credit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditLimit", reflect.TypeOf((*MockUsecase)(nil).CreateCreditLimit), ctx, credit)
}

// CreateCustomer mocks base method.
func (m *MockUsecase) CreateCustomer(ctx context.Context, customer domain.Customer) (domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockUsecaseMockRecorder) CreateCustomer(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockUsecase)(nil).CreateCustomer), ctx, customer)
}

// CreateTransaction mocks base method.
func (m *MockUsecase) CreateTransaction(ctx context.Context, transaction domain.Transaction) (domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockUsecaseMockRecorder) CreateTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockUsecase)(nil).CreateTransaction), ctx, transaction)
}
